# Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: postgres-pv-claim # name of PVC essential for identifying the storage data
#   labels:
#     app: postgres
#     tier: database
# spec:
#   accessModes:
#     - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  # resources:
  #   requests:
  #     storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of mysql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
    tier: database
spec:
  selector: # mysql Pod Should contain same labels
    matchLabels:
      app: postgres
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: postgres
        tier: database
    spec:
      containers:
        - name: spring-petclinic-postgres-1
          image: postgres:16.1 # image from docker-hub
          imagePullPolicy: Never
         # args:
           # - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
          #name: postgres
          env:
            - name: POSTGRES_PASSWORD
              value: petclinic
            - name: POSTGRES_USER # Setting Database Name from a 'ConfigMap'
              value: petclinic
            - name: POSTGRES_DB
              value: petclinic
          ports:
            - containerPort: 5432
              name: postgres
          #volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
            #- name: mysql-persistent-storage
            #  mountPath: /var/lib/mysql #This is the path in the container on which the mounting will take place.
      #volumes:
        #- name: mysql-persistent-storage # Obtaining 'vloume' from PVC
        #  persistentVolumeClaim:
        #    claimName: mysql-pv-claim
---
# Define a 'Service' To Expose mysql to Other Services
apiVersion: v1
kind: Service
metadata:
  name: postgres  # DNS name
  labels:
    app: postgres
    tier: database
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:       # mysql Pod Should contain same labels
    app: postgres
    tier: database
  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant